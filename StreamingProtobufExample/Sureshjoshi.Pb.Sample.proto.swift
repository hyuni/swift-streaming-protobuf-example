// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Sample.proto

import Foundation
import ProtocolBuffers


public struct Sureshjoshi { public struct Pb { }}

public func == (lhs: Sureshjoshi.Pb.Sample, rhs: Sureshjoshi.Pb.Sample) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasX == rhs.hasX) && (!lhs.hasX || lhs.x == rhs.x)
  fieldCheck = fieldCheck && (lhs.hasY == rhs.hasY) && (!lhs.hasY || lhs.y == rhs.y)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Sureshjoshi.Pb {
  public struct SampleRoot {
    public static var sharedInstance : SampleRoot {
     struct Static {
         static let instance : SampleRoot = SampleRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class Sample : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var x:UInt32 = UInt32(0)

    public private(set) var hasX:Bool = false
    public private(set) var y:UInt32 = UInt32(0)

    public private(set) var hasY:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasX {
        try output.writeUInt32(1, value:x)
      }
      if hasY {
        try output.writeUInt32(2, value:y)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasX {
        serialize_size += x.computeUInt32Size(1)
      }
      if hasY {
        serialize_size += y.computeUInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Sureshjoshi.Pb.Sample> {
      var mergedArray = Array<Sureshjoshi.Pb.Sample>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Sureshjoshi.Pb.Sample? {
      return try Sureshjoshi.Pb.Sample.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Sureshjoshi.Pb.Sample {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFromData(data, extensionRegistry:Sureshjoshi.Pb.SampleRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Sureshjoshi.Pb.Sample {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Sureshjoshi.Pb.Sample {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Sureshjoshi.Pb.Sample {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Sureshjoshi.Pb.Sample {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Sureshjoshi.Pb.Sample {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Sureshjoshi.Pb.Sample.Builder {
      return Sureshjoshi.Pb.Sample.classBuilder() as! Sureshjoshi.Pb.Sample.Builder
    }
    public func getBuilder() -> Sureshjoshi.Pb.Sample.Builder {
      return classBuilder() as! Sureshjoshi.Pb.Sample.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Sureshjoshi.Pb.Sample.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Sureshjoshi.Pb.Sample.Builder()
    }
    public func toBuilder() throws -> Sureshjoshi.Pb.Sample.Builder {
      return try Sureshjoshi.Pb.Sample.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Sureshjoshi.Pb.Sample) throws -> Sureshjoshi.Pb.Sample.Builder {
      return try Sureshjoshi.Pb.Sample.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasX {
        output += "\(indent) x: \(x) \n"
      }
      if hasY {
        output += "\(indent) y: \(y) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasX {
               hashCode = (hashCode &* 31) &+ x.hashValue
            }
            if hasY {
               hashCode = (hashCode &* 31) &+ y.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Sureshjoshi.Pb.Sample"
    }
    override public func className() -> String {
        return "Sureshjoshi.Pb.Sample"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Sureshjoshi.Pb.Sample.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Sureshjoshi.Pb.Sample = Sureshjoshi.Pb.Sample()
      public func getMessage() -> Sureshjoshi.Pb.Sample {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasX:Bool {
           get {
                return builderResult.hasX
           }
      }
      public var x:UInt32 {
           get {
                return builderResult.x
           }
           set (value) {
               builderResult.hasX = true
               builderResult.x = value
           }
      }
      public func setX(value:UInt32) -> Sureshjoshi.Pb.Sample.Builder {
        self.x = value
        return self
      }
      public func clearX() -> Sureshjoshi.Pb.Sample.Builder{
           builderResult.hasX = false
           builderResult.x = UInt32(0)
           return self
      }
      public var hasY:Bool {
           get {
                return builderResult.hasY
           }
      }
      public var y:UInt32 {
           get {
                return builderResult.y
           }
           set (value) {
               builderResult.hasY = true
               builderResult.y = value
           }
      }
      public func setY(value:UInt32) -> Sureshjoshi.Pb.Sample.Builder {
        self.y = value
        return self
      }
      public func clearY() -> Sureshjoshi.Pb.Sample.Builder{
           builderResult.hasY = false
           builderResult.y = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Sureshjoshi.Pb.Sample.Builder {
        builderResult = Sureshjoshi.Pb.Sample()
        return self
      }
      public override func clone() throws -> Sureshjoshi.Pb.Sample.Builder {
        return try Sureshjoshi.Pb.Sample.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Sureshjoshi.Pb.Sample {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Sureshjoshi.Pb.Sample {
        let returnMe:Sureshjoshi.Pb.Sample = builderResult
        return returnMe
      }
      public func mergeFrom(other:Sureshjoshi.Pb.Sample) throws -> Sureshjoshi.Pb.Sample.Builder {
        if other == Sureshjoshi.Pb.Sample() {
         return self
        }
        if other.hasX {
             x = other.x
        }
        if other.hasY {
             y = other.y
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Sureshjoshi.Pb.Sample.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Sureshjoshi.Pb.Sample.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            x = try input.readUInt32()

          case 16 :
            y = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
